payload$game_date <- as.Date(payload$game_date, "%Y-%m-%d")
payload$des <- as.character(payload$des)
payload$game_pk <- as.character(payload$game_pk) %>% as.numeric()
payload$on_1b <- as.character(payload$on_1b) %>% as.numeric()
payload$on_2b <- as.character(payload$on_2b) %>% as.numeric()
payload$on_3b <- as.character(payload$on_3b) %>% as.numeric()
payload$px <- as.character(payload$px) %>% as.numeric()
payload$pz <- as.character(payload$pz) %>% as.numeric()
payload$hit_distance_sc <- as.character(payload$hit_distance_sc) %>% as.numeric()
payload$hit_speed <- as.character(payload$hit_speed) %>% as.numeric()
payload$hit_angle <- as.character(payload$hit_angle) %>% as.numeric()
payload$effective_speed <- as.character(payload$effective_speed) %>% as.numeric()
payload$release_spin_rate <- as.character(payload$release_spin_rate) %>% as.numeric()
payload$release_extension <- as.character(payload$release_extension) %>% as.numeric()
payload$barrel <- with(payload, ifelse(hit_angle <= 50 & hit_speed >= 98 & hit_speed * 1.5 - hit_angle >= 11 & hit_speed + hit_angle >= 124, 1, 0))
message("URL read read and payload aquired successfully.")
return(payload)
}
df1 <- scrape_statcast_savant_batter(start_date = "2016-04-06", end_date = "2016-04-05", batterid = 621043)
748865.38+429.48
version
library(blscrapeR)
library(ggplot2)
df <- bls_api(c("LNS13327709", "LNS14000000"),
startyear = 2000, endyear = 2015)
tail(df)
ggplot(data=df, aes(x = date, y = value, color=seriesID)) +
geom_line() +
labs(title = "US Unemployment") +
theme(legend.position="top") +
scale_color_discrete(breaks=c("LNS13327709", "LNS14000000"),
labels=c("U-6", "U-3"))
library(blscrapeR)
library(ggplot2)
df <- bls_api(c("LNS13327709", "LNS14000000"),
startyear = 2000, endyear = 2015)
tail(df)
ggplot(data=df, aes(x = date, y = value, color=seriesID))
ggplot(data=df, aes(x = date, y = value, color=seriesID)) +
geom_line() +
labs(title = "US Unemployment")
View(df)
library(blscrapeR)
library(ggplot2)
df <- bls_api(c("LNS13327709", "LNS14000000"),
startyear = 2000, endyear = 2015)
library(blscrapeR)
library(ggplot2)
df <- bls_api(c("LNS13327709", "LNS14000000"),
startyear = 2000, endyear = 2015)
9*5.9
35/22
22/33
1/0
0/1
262/1167
22/1
1/22
18/1
18/1
1/18
df <- get_bls_county(stateName = "Florida")
library(blscrapeR)
# Map the unemployment rate for the Southeastern United States.
df <- get_bls_county(stateName = "Florida")
bls_map_county(map_data=df, fill_rate = "unemployed_rate",
stateName = "Florida")
library(blscrapeR)
# Map the unemployment rate for the Southeastern United States.
df <- get_bls_county(stateName = "Florida")
bls_map_county(map_data=df, fill_rate = "unemployed_rate",
stateName = "Florida")
library(blscrapeR)
# Grap the data in a pre-formatted data frame.
# If no argument is passed to the function it will load the most recent month's data.
df <- get_bls_county()
#Use map function with arguments.
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
labtitle = "Unemployment Rate by County")
remove.packages("blscrapeR")
install.packages("blscrapeR")
library(blscrapeR)
# Grap the data in a pre-formatted data frame.
# If no argument is passed to the function it will load the most recent month's data.
df <- get_bls_county()
#Use map function with arguments.
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
labtitle = "Unemployment Rate by County")
library(blscrapeR)
# Grap the data in a pre-formatted data frame.
# If no argument is passed to the function it will load the most recent month's data.
df <- get_bls_state()
#Use map function with arguments.
bls_map_state(map_data = df, fill_rate = "unemployed_rate",
labtitle = "Unemployment Rate by County")
.libPaths()
remove.packages("blscrapeR")
devtools::install_github("keberwein/blscrapeR")
library("blscrapeR", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
library(blscrapeR)
# Grap the data in a pre-formatted data frame.
# If no argument is passed to the function it will load the most recent month's data.
df <- get_bls_county()
#Use map function with arguments.
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
labtitle = "Unemployment Rate by County")
bls_map_county(map_data=df, fill_rate = "unemployed_rate",
stateName = "Florida")
df <- get_bls_county()
View(df)
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
labtitle = "Unemployment Rate by County")
detach("package:blscrapeR", unload=TRUE)
get_bls_county <- function(date_mth = NULL, stateName = NULL){
# Set some dummy variables. This keeps CRAN check happy.
countyemp=contyemp=fips_state=NULL
state_fips <- blscrapeR::state_fips
temp<-tempfile()
download.file("http://www.bls.gov/web/metro/laucntycur14.txt", temp)
countyemp <- read.csv(temp,
fill=TRUE,
header=FALSE,
sep="|",
skip=6,
stringsAsFactors=FALSE,
strip.white=TRUE)
colnames(countyemp) <- c("area_code", "fips_state", "fips_county", "area_title", "period",
"labor_force", "employed", "unemployed", "unemployed_rate")
unlink(temp)
# Get rid of empty rows at the bottom.
countyemp <- na.omit(countyemp)
# Set period to proper date format.
period <- contyemp$period
countyemp$period <- as.Date(paste("01-", countyemp$period, sep = ""), format = "%d-%b-%y")
# Check to see if user selected specific state(s).
if (!is.null(stateName)){
# Check to see if states exists.
state_check <- sapply(stateName, function(x) any(grepl(x, state_fips$state)))
if(any(state_check==FALSE)){
stop(message("Please make sure you state names are spelled correctly using full state names."))
}
# If state list is valid. Grab State FIPS codes from internal data set and subset countyemp
state_rows <- sapply(stateName, function(x) grep(x, state_fips$state))
state_selection <- state_fips$fips_state[state_rows]
statelist <- list()
for (s in as.numeric(state_selection)) {
state_vals <- subset(countyemp, fips_state==s)
statelist[[s]] <- state_vals
}
countyemp <- data.table::rbindlist(statelist)
}
# Check for date or dates.
if (!is.null(date_mth)){
date_mth <- as.Date(paste("01", date_mth, sep = ""), format = '%d %b %Y')
if (is.null(date_mth)){
date_mth <- max(countyemp$period)
date_mth <- as.Date(paste("01", date_mth, sep = ""), format = '%d %b %Y')
}
}
# Check to see if users date exists in data set.
dt_exist <- sapply(date_mth, function(x) any(grepl(x, countyemp$period)))
if(any(dt_exist==FALSE)){
message("Are you sure your date(s) is published? Please check the BLS release schedule.")
if(i>Sys.Date()-54){
stop(message("County-wide statistics are usually published on the third Friday of each month for the previous month."))
}
if(i<Sys.Date()-360){
stop(message("This data set only goes back one year. Make sure your date(s) is correct."))
}
}
# Put months to loop in list.
if (is.null(date_mth)){
date_mth <- max(countyemp$period)
}
datalist <- list()
for (i in date_mth) {
mth_vals <- subset(countyemp, period==i)
datalist[[i]] <- mth_vals
}
# Rebind.
df <- data.table::rbindlist(datalist)
# Correct column data fromats.
df$unemployed <- as.numeric(gsub(",", "", as.character(df$unemployed)))
df$employed <- as.numeric(gsub(",", "", as.character(df$employed)))
df$labor_force <- as.numeric(gsub(",", "", as.character(df$labor_force)))
# Get the FIPS code: Have to add leading zeros to any single digit number and combine them.
df$fips_county <- formatC(df$fips_county, width = 3, format = "d", flag = "0")
df$fips_state <- formatC(df$fips_state, width = 2, format = "d", flag = "0")
df$fips <- paste(df$fips_state,df$fips_county,sep="")
return(df)
}
df <- get_bls_county()
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
labtitle = "Unemployment Rate by County")
library(blscrapeR)
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
labtitle = "Unemployment Rate by County")
View(df)
library("dplyr", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
View(df)
df <- subset(df, fips_state != 72)
View(df)
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
labtitle = "Unemployment Rate by County")
df <- subset(df, fips_state != 02)
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
labtitle = "Unemployment Rate by County")
str(df)
df <- subset(df, fips_state != "02")
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
labtitle = "Unemployment Rate by County")
remove.packages("blscrapeR")
devtools::install_github("keberwein/blscrapeR")
library(blscrapeR)
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
labtitle = "Unemployment Rate by County")
df <- get_bls_county()
detach("package:blscrapeR", unload=TRUE)
remove.packages("blscrapeR")
install.packages("blscrapeR")
df <- get_bls_county()
library(blscrapeR)
# Map the unemployment rate for the Southeastern United States.
df <- get_bls_county()
detach("package:blscrapeR", unload=TRUE)
remove.packages("blscrapeR")
install.packages("blscrapeR", dependencies = FALSE)
library(blscrapeR)
# Map the unemployment rate for the Southeastern United States.
df <- get_bls_county()
detach("package:blscrapeR", unload=TRUE)
library(blscrapeR)
df <- get_bls_county()
df <- get_bls_state()
remove.packages("blscrapeR")
devtools::install_github("keberwein/blscrapeR")
library(blscrapeR)
# Map the unemployment rate for the Southeastern United States.
df <- get_bls_county()
bls_map_county(map_data = df, fill_rate = "unemployed_rate")
View(df)
str(df)
df <- subset(df, fips_state != "72")
bls_map_county(map_data = df, fill_rate = "unemployed_rate")
View(df)
df <- subset(df, fips_state != "11")
bls_map_county(map_data = df, fill_rate = "unemployed_rate")
View(df)
remove.packages("blscrapeR")
devtools::install_github("keberwein/blscrapeR")
library(blscrapeR)
bls_map_county(map_data = df, fill_rate = "unemployed_rate")
# Leaflet map
library(blscrapeR)
library(tigris)
library(leaflet)
map.shape <- counties(cb = TRUE, year = 2015)
df <- get_bls_county()
# Slice the df down to only the variables we need and rename "fips" colunm
# so I can get a cleaner merge later.
df <- df[, c("unemployed_rate", "fips")]
colnames(df) <- c("unemployed_rate", "GEOID")
leafmap <- geo_join(map.shape, df, by="GEOID")
# Format popup data for leaflet map.
popup_dat <- paste0("<strong>County: </strong>",
leafmap$NAME,
"<br><strong>Value: </strong>",
leafmap$unemployed_rate)
pal <- colorQuantile("YlOrRd", NULL, n = 20)
# Render final map in leaflet.
leaflet(data = leafmap) %>% addTiles() %>%
addPolygons(fillColor = ~pal(unemployed_rate),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat)
head(leafmap)
names(leafmap)
# Format popup data for leaflet map.
popup_dat <- paste0("<strong>County: </strong>",
leafmap$NAME,
"<br><strong>Value: </strong>",
leafmap$unemployed_rate),
"<br><strong>StateFIPS: </strong>",
leafmap$STATEFP)
pal <- colorQuantile("YlOrRd", NULL, n = 20)
# Render final map in leaflet.
leaflet(data = leafmap) %>% addTiles() %>%
addPolygons(fillColor = ~pal(unemployed_rate),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat)
# Format popup data for leaflet map.
popup_dat <- paste0("<strong>County: </strong>",
leafmap$NAME,
"<br><strong>Value: </strong>",
leafmap$unemployed_rate,
"<br><strong>StateFIPS: </strong>",
leafmap$STATEFP)
pal <- colorQuantile("YlOrRd", NULL, n = 20)
# Render final map in leaflet.
leaflet(data = leafmap) %>% addTiles() %>%
addPolygons(fillColor = ~pal(unemployed_rate),
fillOpacity = 0.8,
color = "#BDBDC3",
weight = 1,
popup = popup_dat)
#Use map function with arguments.
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
projection = "mercator")
df <- get_bls_county()
#Use map function with arguments.
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
projection = "mercator")
#Use map function with arguments.
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
projection = "lambert")
remove.packages("blscrapeR")
devtools::install_github("keberwein/blscrapeR")
# Leaflet map
library(blscrapeR)
df <- get_bls_county()
#Use map function with arguments.
bls_map_county(map_data = df, fill_rate = "unemployed_rate")
df <- get_bls_county(stateName = "Florida")
bls_map_county(map_data=df, fill_rate = "unemployed_rate",
stateName = "Florida")
3.2/1
1/.2
1/.02
remove.packages("blscrapeR")
install.packages("blscrapeR", dependencies = FALSE)
library(blscrapeR)
# Grap the data in a pre-formatted data frame.
# If no argument is passed to the function it will load the most recent month's data.
df <- get_bls_county()
#Use map function with arguments.
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
labtitle = "Unemployment Rate by County")
14.75*30
442.50*0.28
library(blscrapeR)
# Median Usual Weekly Earnings by Occupation, Unadjusted Second Quartile.
# In current dollars
df <- bls_api('CES0000000001'),
startyear = 2008,
registrationKey = "BLS_KEY")
library(blscrapeR)
# Median Usual Weekly Earnings by Occupation, Unadjusted Second Quartile.
# In current dollars
df <- bls_api('CES0000000001',
startyear = 2008,
registrationKey = "BLS_KEY")
View(df)
library(blscrapeR)
# Median Usual Weekly Earnings by Occupation, Unadjusted Second Quartile.
# In current dollars
df <- bls_api('CES0000000001',
startyear = 2008,
registrationKey = "BLS_KEY")
df
library(blscrapeR)
# Median Usual Weekly Earnings by Occupation, Unadjusted Second Quartile.
# In current dollars
df <- bls_api('CES0000000001',
startyear = 2008)
library(blscrapeR)
# Median Usual Weekly Earnings by Occupation, Unadjusted Second Quartile.
# In current dollars
df <- bls_api('CES0000000001')
View(df)
library(blscrapeR)
set_bls_key("aeb89abc67f340068e6a4f2454bbaece")
# First time, reload your enviornment so you can use the key without restarting R.
readRenviron("~/.Renviron")
# You can check it with:
Sys.getenv("BLS_KEY")
Sys.getenv("BLS_KEY")
set_bls_key("aeb89abc67f340068e6a4f2454bbaece")
set_bls_key("aeb89abc67f340068e6a4f2454bbaece", overwrite = TRUE)
readRenviron("~/.Renviron")
Sys.getenv("BLS_KEY")
df <- bls_api('CES0000000001', startyear=2008, registrationKey="BLS_KEY")
df <- bls_api('CES0000000001', startyear=2008, endyear = 2017, registrationKey="BLS_KEY")
df <- bls_api('CES0000000001', registrationKey="BLS_KEY")
df <- bls_api('CES0000000001', registrationKey="BLS_KEY")
df <- bls_api('CES0000000001')
View(df)
df <- bls_api(c('CES0000000001'), startyear = 2008, registrationKey = "BLS_KEY")
df <- bls_api(c("LEU0254530800", "LEU0254530600"),
startyear = 2000, endyear = 2015,
registrationKey = "BLS_KEY")
df <- bls_api(c("LEU0254530800", "LEU0254530600"),
startyear = 2000, endyear = 2015,
registrationKey = "BLS_KEY")
View(df)
df <- bls_api('CES0000000001', startyear = 2008, registrationKey = "BLS_KEY")
library(blscrapeR)
# Median Usual Weekly Earnings by Occupation, Unadjusted Second Quartile.
# In current dollars
df <- bls_api('CES0000000001', startyear = 2008, registrationKey = "BLS_KEY")
df <- bls_api(c("LEU0254530800", "LEU0254530600"),
startyear = 2000, endyear = 2015,
registrationKey = "BLS_KEY")
View(df)
, startyear = 2008, registrationKey = "BLS_KEY")
View(df)
# Median Usual Weekly Earnings by Occupation, Unadjusted Second Quartile.
# In current dollars
df <- bls_api('CES0000000001')
View(df)
df <- bls_api('CES0000000001', startyear = 2008, registrationKey = "BLS_KEY")
library(blscrapeR)
# Median Usual Weekly Earnings by Occupation, Unadjusted Second Quartile.
# In current dollars
df <- bls_api('CES0000000001', startyear = 2008, endyear = 2016, registrationKey = "BLS_KEY")
View(df)
library(blscrapeR)
# Grap the data in a pre-formatted data frame.
# If no argument is passed to the function it will load the most recent month's data.
df <- get_bls_county()
#Use map function with arguments.
bls_map_county(map_data = df, fill_rate = "unemployed_rate",
labtitle = "Unemployment Rate by County")
View(df)
library(blscrapeR)
# Map the unemployment rate for the Southeastern United States.
df <- get_bls_county(stateName = "Florida")
bls_map_county(map_data=df, fill_rate = "unemployed_rate",
stateName = "Florida")
library(blscrapeR)
# Map the unemployment rate for the Southeastern United States.
df <- get_bls_county()
bls_map_county(map_data=df, fill_rate = "unemployed_rate")
1^3+5^3+3^3
1^3+2^3+3^
3
load("~/Google Drive/R/tableau_r_forecast/SuperstoreSales.csv")
setwd("~/Google Drive/R/tableau_r_forecast")
read.csv("SuperstoreSales.csv")
SuperstoreSales <- read.csv("SuperstoreSales.csv")
SuperstoreSales$Order.Date <- as.Date(as.character(SuperstoreSales$Order.Date), format="%m/%d/%y")
# Create time sereis
time <- ts(data=SuperstoreSales$Sales, start=c(2010, 1), deltat=1/12)
library("forecast", lib.loc="/Library/Frameworks/R.framework/Versions/3.3/Resources/library")
fcast <- forecast.Arima(time)
SuperstoreSales$Order.Date <- as.Date(as.character(SuperstoreSales$Order.Date), format="%m/%d/%y")
SuperstoreSales <- read.csv("SuperstoreSales.csv")
SuperstoreSales$Order.Date <- as.Date(as.character(SuperstoreSales$Order.Date), format="%m/%d/%y")
fcast <- forecast.Arima(SuperstoreSales)
SuperstoreSales <- read.csv("SuperstoreSales.csv")
library(forecast)
# Date formatting is bad, convert to correct format
SuperstoreSales$Order.Date <- as.Date(as.character(SuperstoreSales$Order.Date), format="%m/%d/%y")
# Create time sereis
time <- ts(data=SuperstoreSales$Sales, start=c(2010, 1), deltat=1/12)
fcast <- forecast.ets(time)
fcast <- forecast(time)
rm(fcast)
time <- arima(data=SuperstoreSales$Sales, start=c(2010, 1), deltat=1/12)
time <- arima(data=SuperstoreSales$Sales)
View(SuperstoreSales)
air.model <- Arima(window(SuperstoreSales,end=2013+12/01),order=c(0,1,1),
seasonal=list(order=c(0,1,1),period=12),lambda=0)# Fit into forecsast model
air.model <- Arima(window(SuperstoreSales),order=c(0,1,1),
seasonal=list(order=c(0,1,1),period=12),lambda=0)# Fit into forecsast model
z=WWWusage
air.model <- Arima(window(time,end=2013+12/01),order=c(0,1,1),
seasonal=list(order=c(0,1,1),period=12),lambda=0)# Fit into forecsast model
air.model <- Arima(window(time),order=c(0,1,1),
seasonal=list(order=c(0,1,1),period=12),lambda=0)# Fit into forecsast model
air.model <- Arima(window(time),order=c(0,1,1),
seasonal=list(order=c(0,1,1),period=12),lambda=0)# Fit into forecsast model
time <- Arima(window(time),order=c(0,1,1),
seasonal=list(order=c(0,1,1),period=12),lambda=0)# Fit into forecsast model
fcast <- forecast(time)
plot(forecast(time))
lines(fitted(fcast),col="blue")
# Arima Model
time <- Arima(window(time),order=c(0,1,1),
seasonal=list(order=c(0,1,1),period=12),lambda=0)# Fit into forecsast model
fcast <- forecast.Arima(time)
accuracy(fcast)
time <- ts(data=SuperstoreSales$Sales, start=c(2010, 1), deltat=1/12)
fcast <- forecast(time)
str(fcast)
# Arima Model
time <- Arima(window(time),order=c(0,1,1),
seasonal=list(order=c(0,1,1),period=12),lambda=0)
fcast <- forecast.Arima(time)
mean(fcast)
fcast$mean
fcast
View(SuperstoreSales)
time <- ts(data=SuperstoreSales$Sales, start=c(2010, 1), deltat=1/12)
fcast1 <- forecast(time)
fcast$mean
facst1
facast1
fcast1
timeArima <- auto.arima(window(time),order=c(0,1,1), seasonal=list(order=c(0,1,1),period=12),lambda=0)
fcastArima <- forecast.Arima(time)
timeArima <- auto.arima(window(time),order=c(0,1,1), seasonal=list(order=c(0,1,1),period=12),lambda=0)
fcastArima <- forecast.Arima(time)
timeArima <- auto.arima(window(time),order=c(0,1,1), seasonal=list(order=c(0,1,1),period=12),lambda=0)
fcastArima <- forecast.Arima(time)
time <- ts(data=SuperstoreSales$Sales, start=c(2010, 1), deltat=1/12)
z=auto.arima(time)
fcastArima <- forecast.Arima(z)
fcast$model
SuperstoreSales <- read.csv("https://raw.githubusercontent.com/keberwein/Data_Science_Riot/master/Tableau%20R%20Forecast/SuperstoreSales.csv")
